/*
 * spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getUsersUserId
     * @param userId Id of an existing user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersUserIdCall(Integer userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersUserIdValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUsersUserId(Async)");
        }
        

        okhttp3.Call localVarCall = getUsersUserIdCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Get User Info by User ID
     * Retrieve the information of the user with the matching user ID.
     * @param userId Id of an existing user. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User Not Found </td><td>  -  </td></tr>
     </table>
     */
    public User getUsersUserId(Integer userId) throws ApiException {
        ApiResponse<User> localVarResp = getUsersUserIdWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get User Info by User ID
     * Retrieve the information of the user with the matching user ID.
     * @param userId Id of an existing user. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUsersUserIdWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getUsersUserIdValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Info by User ID (asynchronously)
     * Retrieve the information of the user with the matching user ID.
     * @param userId Id of an existing user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersUserIdAsync(Integer userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersUserIdValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchUsersUserId
     * @param userId Id of an existing user. (required)
     * @param inlineObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email Already Taken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchUsersUserIdCall(Integer userId, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchUsersUserIdValidateBeforeCall(Integer userId, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling patchUsersUserId(Async)");
        }
        

        okhttp3.Call localVarCall = patchUsersUserIdCall(userId, inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Update User Information
     * Update the information of an existing user.
     * @param userId Id of an existing user. (required)
     * @param inlineObject  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email Already Taken </td><td>  -  </td></tr>
     </table>
     */
    public User patchUsersUserId(Integer userId, InlineObject inlineObject) throws ApiException {
        ApiResponse<User> localVarResp = patchUsersUserIdWithHttpInfo(userId, inlineObject);
        return localVarResp.getData();
    }

    /**
     * Update User Information
     * Update the information of an existing user.
     * @param userId Id of an existing user. (required)
     * @param inlineObject  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email Already Taken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> patchUsersUserIdWithHttpInfo(Integer userId, InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = patchUsersUserIdValidateBeforeCall(userId, inlineObject, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User Information (asynchronously)
     * Update the information of an existing user.
     * @param userId Id of an existing user. (required)
     * @param inlineObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email Already Taken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchUsersUserIdAsync(Integer userId, InlineObject inlineObject, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchUsersUserIdValidateBeforeCall(userId, inlineObject, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postUser
     * @param inlineObject1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Required Information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email Already Taken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUserCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUserValidateBeforeCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postUserCall(inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Create New User
     * Create a new user.
     * @param inlineObject1  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Required Information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email Already Taken </td><td>  -  </td></tr>
     </table>
     */
    public User postUser(InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<User> localVarResp = postUserWithHttpInfo(inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Create New User
     * Create a new user.
     * @param inlineObject1  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Required Information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email Already Taken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> postUserWithHttpInfo(InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = postUserValidateBeforeCall(inlineObject1, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create New User (asynchronously)
     * Create a new user.
     * @param inlineObject1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Required Information </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Email Already Taken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUserAsync(InlineObject1 inlineObject1, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUserValidateBeforeCall(inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
